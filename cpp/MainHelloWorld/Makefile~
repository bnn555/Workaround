# Makefile generated by imake - do not edit!

# -----------------------------------------------------------------------
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.193 94/04/10 17:39:55 rws Exp $
# rules:  $SunSoft: @(#)Imake.rules	1.1 01/13/97 16:16:21 $

all::

# SUNSOFT SUNSOFT_LOADABLE

CC_VERBOSE ?= 0
CC_COLORS ?= 1
CC_SHARED ?= 0

ifeq (${CC_SHARED},0)
CC_LIB_EXT=.a
else
CC_LIB_EXT=.so
endif

ifeq (${CC_COLORS},1)
export C_BOLD="\\033[1m"
export C_RESET="\\033[0m"
export C_FG_BLACK="\\E[0\;30m"
export C_FG_RED="\\E[0\;31m"
export C_FG_GREEN="\\E[0\;32m"
export C_FG_YELLOW="\\E[0\;33m"
export C_FG_BLUE="\\E[0\;34m"
export C_FG_PURPLE="\\E[0\;35m"
export C_FG_CYAN="\\E[0\;36m"
export C_FG_WHITE="\\E[0\;37m"
export C_BG_BLACK="\\E[40m"
export C_BG_RED="\\E[41m"
export C_BG_GREEN="\\E[42m"
export C_BG_YELLOW="\\E[43m"
export C_BG_BLUE="\\E[44m"
export C_BG_PURPLE="\\E[45m"
export C_BG_CYAN="\\E[46m"
export C_BG_WHITE="\\E[47m"
endif

CXX = ${WORKAROUND_CXX}
IMAKE = /usr/bin/imake
MAKE = /usr/bin/make

CXXFLAGS_DEFAULT = $(shell cat ${WORKAROUND_BASE}/config/CXXFLAGS.CFG | tr "\n" " ")

ifeq (${WORKAROUND_OPTIMIZE},RELEASE)
   CXXFLAGS_TARGET = -O2 -fno-strict-aliasing -DNDEBUG
else ifeq (${WORKAROUND_OPTIMIZE},DEBUG_OPTIMIZE)
   CXXFLAGS_TARGET = -O2 -fno-strict-aliasing
else ifeq (${WORKAROUND_OPTIMIZE},DEBUG)
   CXXFLAGS_TARGET = -ggdb -g3 -fstack-protector-all
endif

CXXFLAGS_COMPLETE = $(CXXFLAGS_DEFAULT) $(CXXFLAGS) $(CXXFLAGS_TARGET) $(CXXFLAGS_POST)

CXXDEFINES_DEFAULT = -D_GNU_SOURCE -D_REENTRANT -D__LOG_CATEGORY__=\"GetLogCat\"

CXXDEFINES_COMPLETE = $(CXXDEFINES_DEFAULT) $(CXXDEFINES_PRAGMA) $(CXXDEFINES) $(CXXDEFINES_POST)

CXXINCLUDES_DEFAULT = -I.

CXXINCLUDES_COMPLETE = $(CXXINCLUDES_DEFAULT) $(INCLUDE) $(CXXINCLUDES_POST)

LIBRARIES_TARGET = $(shell imake_get_wka_libs.sh ${WORKAROUND_CPP_BASE})
LIBRARIES_UNTARGET =

LD_CHECK_SYM = -Wl,--unresolved-symbols=ignore-in-shared-libs

LDFLAGS_DEFAULT = -rdynamic

LDFLAGS_COMPLETE = $(LDFLAGS_DEFAULT) $(LDFLAGS)

OBJS_CC = ${TARGET}/.objs_cc

CSC_ROOT = $(shell echo $(CURDIR) | sed 's/\(.*\)\/Src\(.*\)/\1/g')
SUBFOLDERS_CSC = $(shell find $(CSC_ROOT) -type d -name "Lib*")
FOLDERS_CSC = $(CSC_ROOT)/Src $(CSC_ROOT)/EvtCsm $(CSC_ROOT)/SrvUsd $(CSC_ROOT)/SreUsd $(SUBFOLDERS_CSC)
INCLUDES_CSC =  $(addprefix -I,$(FOLDERS_CSC))

.PHONY: all clean compile libs mains gencode gencode_links domakefile subdirs objs_cc
.DEFAULT_GOAL = all

ifeq (${CC_VERBOSE},0)
.SILENT :
endif

MAKECMDGOALS ?= all

${TARGET} :
	@echo -e "$(C_FG_RED)$(C_BOLD)Creating target $(CURDIR:${WORKAROUND_CPP_BASE}/%=%/${TARGET})$(C_RESET)"
	@mkdir -p ${TARGET}

.PRECIOUS : Makefile
Makefile : Imakefile ${WORKAROUND_ENV_BASE}/wka.rules
	@echo -e "$(C_FG_YELLOW)$(C_BG_BLACK)$(C_BOLD)WARNING, obsolete Makefile, calling imake$(C_RESET)"; 	imake; 	$(MAKE) $(MAKECMDGOALS)

${TARGET}/%.o : %.cc | ${TARGET}
ifeq (${CC_VERBOSE},0)
	@echo -e "$(C_FG_RED)Compiling $<$(C_RESET)"
endif
	$(CXX) -c $(CXXFLAGS_COMPLETE) $(CXXDEFINES_COMPLETE) $(CXXINCLUDES_COMPLETE) -MMD -MP -MT "$@ $(@:.o=.d)" -MF $(@:.o=.d) $< -o $@

${TARGET}/%.o : %.cpp | ${TARGET}
ifeq (${CC_VERBOSE},0)
	@echo -e "$(C_FG_RED)Compiling $<$(C_RESET)"
endif
	$(CXX) -c $(CXXFLAGS_COMPLETE) $(CXXDEFINES_COMPLETE) $(CXXINCLUDES_COMPLETE) -MMD -MP -MT "$@ $(@:.o=.d)" -MF $(@:.o=.d) $< -o $@

$(MAKECMDGOALS) ::
	@echo -e "$(C_FG_BLUE)$(C_BOLD)${WORKAROUND_OPTIMIZE}: make $(MAKECMDGOALS) in $(CURDIR:${WORKAROUND_CPP_BASE}/%=%)$(C_RESET)"

all ::
	@$(MAKE) gencode
	@$(MAKE) compile
	@$(MAKE) libs
	@$(MAKE) mains

domakefile :: subdirs

gencode :: subdirs

compile :: subdirs

libs :: subdirs

mains :: subdirs

clean :: subdirs
	@echo -e "$(C_FG_PURPLE)$(C_BOLD)Cleaning $(CURDIR:${WORKAROUND_CPP_BASE}/%=%)$(C_RESET)"

INCLUDE =  -I../LibHelloWorld

SRCS =  m_helloWorld.cc

_SRCS_O = $(patsubst %.cc,${TARGET}/%.o,$(patsubst %.cpp,${TARGET}/%.o,$(SRCS)))

objs_cc : | ${TARGET}
	@echo $(_SRCS_O) > $(OBJS_CC)

compile :: objs_cc $(_SRCS_O) | ${TARGET}

ifeq ($(MAKECMDGOALS),compile)
-include $(_SRCS_O:.o=.d)
endif

LIBS_UNTARGET= $(LIBRARIES_UNTARGET)

mains :: ${TARGET}/m_helloWorld

m_helloWorld_OBJS = $(shell imake_get_objs.sh  .)

${TARGET}/m_helloWorld : $(m_helloWorld_OBJS) TargetLibs($(LIBRARIES_TARGET)) | ${TARGET}
ifeq (${CC_VERBOSE},0)
	@echo -e "$(C_FG_RED)$(C_BOLD)Linking $(CURDIR:${WORKAROUND_CPP_BASE}/%=%)/$@$(C_RESET)"
endif
	$(CXX) $(CXXFLAGS_COMPLETE) $(LDFLAGS_COMPLETE) $(LD_CHECK_SYM) $(m_helloWorld_OBJS) LinkLibs($(LIBRARIES_TARGET)) $(LIBS_UNTARGET) -o $@

